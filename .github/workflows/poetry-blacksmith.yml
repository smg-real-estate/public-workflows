name: Provides Poetry dependencies, lints code with pre-commit and runs unit tests

on:
  workflow_call:
    inputs:
      runner:
        required: false
        type: string
        default: ubuntu-22.04
        description: GitHub runner for the job

      poetry_scripts:
        required: false
        type: string
        description: List of poetry scripts to run

      poetry_extras:
        required: false
        type: string
        description: List of extras to pass to poetry install

      python_version:
        required: false
        type: string
        description: Python version to install with setup-python

      node_version:
        required: false
        type: string
        description: NodeJS version to install with setup-node

      debug:
        required: false
        type: boolean
        default: false

      github_app_id:
        required: false
        type: string
        description:
          GitHub app to pass credentials for. They are passed as build arguments
          GITHUB_USER and GITHUB_TOKEN when building the image

      coverage_artifact_id:
        required: false
        type: string
        description: artifact-id for GitHub actions/upload-artifact to store coverage report

      coverage_path:
        required: false
        type: string
        description: Path to coverage report that will be uploaded with coverage_artifact_id

      pip-constraint:
        required: false
        type: string
        description: Path to pip constraint file

      pre-install:
        required: false
        type: string
        description: Command to run before installing dependencies

    secrets:
      github_app_private_key:
        required: false
        description: GitHub app private key that is used to get app token
      SSH_KEY:
        required: false
        description: Private SSH key to use by default (e.g. for git+ssh://)

jobs:
  scripts:
    name: Script
    runs-on: ${{ inputs.runner }}
    env:
      PIP_CONSTRAINT: ${{ inputs.pip-constraint }}

    steps:
      - uses: actions/checkout@v5
        with:
          set-safe-directory: true

      - run: git config --global --add safe.directory "${GITHUB_WORKSPACE}"

      - name: Cache pipx
        uses: useblacksmith/cache@v5
        with:
          path: |
            /opt/pipx
            /opt/pipx_bin
          key: ${{runner.os}}-${{runner.arch}}-poetry

      - name: Install Poetry
        run: pipx install poetry

      - uses: useblacksmith/setup-python@v6
        if: inputs.python_version != 'default'
        with:
          python-version: ${{ inputs.python_version }}
          python-version-file: "pyproject.toml"
          cache: "poetry"
          cache-dependency-path: |
            pyproject.toml
            poetry.lock

      - uses: useblacksmith/setup-node@v5
        if: inputs.node_version
        with:
          node-version: ${{ inputs.node_version }}

      - env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        if: ${{ env.SSH_KEY }}
        uses: dym-ok/inject-ssh-key@v2
        with:
          private-key: ${{ secrets.SSH_KEY }}

      - name: Get token
        if: ${{ inputs.github_app_id }}
        id: gh_token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v1
        with:
          app-id: ${{ inputs.github_app_id }}
          private-key: ${{ secrets.github_app_private_key }}
          owner: ${{ github.repository_owner }}

      - name: Add GitHub token
        id: add-token
        if: ${{ inputs.github_app_id }}
        env:
          GITHUB_USER: x-access-token
          GITHUB_TOKEN: ${{ steps.gh_token.outputs.token }}
        run: |
          git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github".insteadOf "https://github"
          grep github pyproject.toml \
          | awk "{print \"poetry config repositories.\"\$1\" \"\$6}" \
          | sed 's/["|,]//g' \
          | xargs -L 1 -I {} bash -c "{};" && \
          grep github pyproject.toml \
          | awk "{print \"poetry config http-basic.\"\$1\" $GITHUB_USER $GITHUB_TOKEN\"}" \
          | sed 's/["|,]//g' \
          | xargs -L 1 -I {} bash -c "{};"

      - name: pre-install
        if: ${{ inputs.pre-install }}
        run: ${{ inputs.pre-install }}

      - name: install
        if: ${{ ! inputs.debug && ! inputs.poetry_extras }}
        env:
          GITHUB_USER: x-access-token
          GITHUB_TOKEN: ${{ steps.gh_token.outputs.token }}
        run: |
          poetry install --no-root

      - name: install-with-extras
        if: ${{ ! inputs.debug && inputs.poetry_extras }}
        env:
          GITHUB_USER: x-access-token
          GITHUB_TOKEN: ${{ steps.gh_token.outputs.token }}
        run: |
          poetry install --no-root --extras ${{ inputs.poetry_extras }}

      - name: verbose-install
        if: ${{ inputs.debug && ! inputs.poetry_extras }}
        env:
          GITHUB_USER: x-access-token
          GITHUB_TOKEN: ${{ steps.gh_token.outputs.token }}
        run: poetry install --no-root -vvv

      - name: verbose-install-with-extras
        if: ${{ inputs.debug && inputs.poetry_extras }}
        env:
          GITHUB_USER: x-access-token
          GITHUB_TOKEN: ${{ steps.gh_token.outputs.token }}
        run: poetry install --no-root -vvv --extras ${{ inputs.poetry_extras }}

      - name: Cache pre-commit
        uses: useblacksmith/cache@v5
        with:
          path: ~/.cache/pre-commit
          key: ${{runner.os}}-${{runner.arch}}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - uses: actions/github-script@v8
        name: run-scripts
        id: run-scripts
        if: inputs.poetry_scripts
        with:
          script: |
            const poetry_scripts = '${{ inputs.poetry_scripts }}';
            const scripts = JSON.parse(poetry_scripts);
            const workspace = process.env["GITHUB_WORKSPACE"];
            for (const script of scripts) {
              console.log(`Running "${script}" in ${workspace}`);
              options = {
                  cwd: workspace,
                  debug: true
              };
              await exec.exec( "poetry", [ "run", ...script.split(" ") ], options);
            }

      - name: debug
        if: failure()
        run: |
          set -v \
          && echo "============ Git status: ===========" \
          && git status \
          && echo "====================================" \
          && (printenv | sort )\
          && id \
          && pwd \
          && ls -la \
          && poetry --version \
          && poetry env info \
          && poetry config --list \
          && git config --global -l \
          && poetry show \
          && pip3 freeze \
          && (cat "${HOME}/.cache/pre-commit/pre-commit.log" || echo "No pre-commit logs")

      - name: upload-coverage
        if: inputs.coverage_artifact_id
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.coverage_artifact_id }}
          path: ${{ inputs.coverage_path }}
