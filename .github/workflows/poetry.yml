name: Provides Poetry dependencies, lints code with pre-commit and runs unit tests

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
        description: Docker image for the job container

      image_options:
        required: false
        type: string
        # we don't need any default container options, but it can't be an empty string
        default: -e NOOP
        description: Options to pass to Docker

      poetry_scripts:
        required: false
        type: string
        description: List of poetry scripts to run

      debug:
        required: false
        type: boolean
        default: false

      github_app_id:
        required: false
        type: string
        description:
          GitHub app to pass credentials for. They are passed as build arguments
          GITHUB_USER and GITHUB_TOKEN when building the image

      coverage_artifact_id:
        required: false
        type: string
        description: artifact-id for GitHub actions/upload-artifact to store coverage report

      coverage_path:
        required: false
        type: string
        description: Path to coverage report that will be uploaded with coverage_artifact_id

      home:
        required: false
        type: string
        description: Home folder location

      pip-constraint:
        required: false
        type: string
        description: Path to pip constraint file

      pre-install:
        required: false
        type: string
        description: Command to run before installing dependencies

    secrets:
      DOCKER_USERNAME:
        required: true
        description: User for accessing Docker Hub
      DOCKER_PASSWORD:
        required: true
        description: Password for accessing Docker Hub
      github_app_private_key:
        required: false
        description: GitHub app private key that is used to get app token
      SSH_KEY:
        required: false
        description: Private SSH key to use by default (e.g. for git+ssh://)
      CODECOV_TOKEN:
        required: false
        description: coodecov.io token for uploading coverage reports

env:
  PRE_COMMIT_HOME: /tmp/.cache/pre-commit
  HOME: ${{ inputs.home }}

jobs:
  scripts:
    name: Script
    runs-on: ubuntu-latest
    env:
      PIP_CONSTRAINT: ${{ inputs.pip-constraint }}
    container:
      image: ${{ inputs.image_name }}
      options: ${{ inputs.image_options }}
      env:
        PIP_CONSTRAINT: ${{ env.PIP_CONSTRAINT }}
      credentials:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
        with:
          set-safe-directory: true

      - run: git config --global --add safe.directory "${GITHUB_WORKSPACE}"

      - uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
          cache: "poetry"
          cache-dependency-path: |
            poetry.lock
            .pre-commit-config.yml

      - env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        if: ${{ env.SSH_KEY }}
        uses: dym-ok/inject-ssh-key@v2
        with:
          private-key: ${{ secrets.SSH_KEY }}

      - name: Get token
        if: ${{ inputs.github_app_id }}
        id: gh_token
        uses: actions/create-github-app-token@31c86eb3b33c9b601a1f60f98dcbfd1d70f379b4 # v1
        with:
          app-id: ${{ inputs.github_app_id }}
          private-key: ${{ secrets.github_app_private_key }}

      - name: Add GitHub token
        id: add-token
        if: ${{ inputs.github_app_id }}
        env:
          GITHUB_USER: x-access-token
          GITHUB_TOKEN: ${{ steps.gh_token.outputs.token }}
        run: |
          git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github".insteadOf "https://github"

      - name: pre-install
        run: ${{ inputs.pre-install }}

      - name: install
        if: ${{ ! inputs.debug }}
        run: poetry install --no-root

      - name: verbose-install
        if: ${{ inputs.debug }}
        run: poetry install --no-root -vvv

      - uses: actions/github-script@v7
        name: run-scripts
        id: run-scripts
        if: inputs.poetry_scripts
        with:
          script: |
            const poetry_scripts = '${{ inputs.poetry_scripts }}';
            const scripts = JSON.parse(poetry_scripts);
            const workspace = process.env["GITHUB_WORKSPACE"];
            for (const script of scripts) {
              console.log(`Running "${script}" in ${workspace}`);
              options = {
                  cwd: workspace,
                  debug: true
              };
              await exec.exec( "poetry", [ "run", ...script.split(" ") ], options);
            }

      - name: debug
        if: failure()
        run: |
          set -v \
          && (printenv | sort )\
          && id \
          && pwd \
          && ls -la \
          && poetry --version \
          && poetry env info \
          && poetry show \
          && pip3 freeze \
          && (cat "${PRE_COMMIT_HOME}/pre-commit.log" || echo "No pre-commit logs")

      - name: codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: ${{ env.CODECOV_TOKEN }}
        uses: codecov/codecov-action@v4

      - name: upload-coverage
        if: inputs.coverage_artifact_id
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.coverage_artifact_id }}
          path: ${{ inputs.coverage_path }}
